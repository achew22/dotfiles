if-shell 'test -z "$POWERLINE_COMMAND"' 'if-shell "which powerline-client" "set-environment -g POWERLINE_COMMAND powerline-client" "set-environment -g POWERLINE_COMMAND powerline"'

# Turn on lots of colors
set -g default-terminal screen-256color

set -g status on
set -g status-utf8 on
set -g status-interval 2
set -g status-fg colour231
set -g status-bg colour234
set -g status-left-length 20
set -g status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=colour234,nobold]#(eval $POWERLINE_COMMAND tmux left)'
set -g status-right '#(eval $POWERLINE_COMMAND tmux right -R pane_id=`tmux display -p "#D"`)'
set -g status-right-length 150
set -g window-status-format "#[fg=colour244,bg=colour234]#I #[fg=colour240] #[default]#W "
set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"
set-window-option -g window-status-fg colour249
set-window-option -g window-status-activity-attr none
set-window-option -g window-status-bell-attr none
set-window-option -g window-status-activity-fg yellow
set-window-option -g window-status-bell-fg red

# Remap {split,new}-window commands to reuse the same CWD.
bind '%' split-window -h -c '#{pane_current_path}'  # Split panes horizontal
bind '"' split-window -v -c '#{pane_current_path}'  # Split panes vertically
bind c new-window -c '#{pane_current_path}' # Create new window

#setw -g mode-mouse on
#set-option -g mouse-select-pane on
#set-option -g mouse-resize-pane on

#set -g status-right '#(exec get_next_meeting)'
#set-option -g status-right-length 70

# Set active window
#set-window-option -g window-status-current-fg blue
#set-window-option -g window-status-current-bg green
#set-window-option -g window-status-current-attr bright

# Clear key
bind -n C-k send-keys "C-k" \; send-keys "C-u" \; send-keys "clear" \; send-keys "Enter" \; run-shell "sleep .3s; tmux clear-history"
#bind -n C-k send-keys "C-k" \; send-keys "C-u" \; send-keys -R

# if a "bell" is used in any of the attached sessions, trigger a bell in the
# current window. Turn off the visual bell, instead opting for an audible bell.
set-option -g bell-action any
set-option -g visual-bell off

# Windows/panes start couting from 1
set -g base-index 1
set-window-option -g pane-base-index 1

# When a smaller terminal connects to a tmux client, it shrinks to fit it. The
# clients attached with bigger displays see this constrained view.
# aggressive-resize makes it such that the window is only resized if the
# smaller client is actively looking at it.
setw -g aggressive-resize on

# C-b r will reload tmux config
bind-key r source-file ~/.tmux.conf

# Lower escape timing from 500ms to 50ms for quicker response to scroll-buffer access.
set -s escape-time 50

# Load local overrides
source-file ~/.tmux.local.conf

# vim: ft=tmux

# Tmux navigator power switching through vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

set-window-option -g mode-keys vi
