# /usr/bin/env bash
##############################
# To install run this script #
##############################

# Exit if there is an uncaught non-zero exit code.
set -o errexit
# Error traps should be inherited.
set -o errtrace

# Debug variables
DEBUG=${DEBUG:-false}

is_file() {
    local file=$1

    [[ -f $file ]]
}

print_line() {
  local file=$1
  shift
  local line=$1
  shift

  sed -n -e "${line}p" $file
}

backtrace() {
  printf "Backtrace:\n"

  # caller takes an argument that is the level of the stack to pring
  frame=0
  while true; do
    IFS=" " read -a args <<< $(caller $frame)
    local line=${args[0]}
    local fun=${args[1]}
    local file=${args[2]}

    printf " $file:$line:$fun: %s\n" $(print_line $file $line)

    # Increment frame to step down a level
    ((frame++))

    if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
      break
    fi
  done
}
#backtrace

on_err() {
  local line=$1
  shift

  local red=$(tput setaf 1)
  local normal=$(tput sgr0)
  local file=$0

  line_text=$(print_line "${file}" $line)
  printf "\n${red}Exception occurred\n"
  printf "\tFile: ${file}\n"
  printf "\tLine: ${line}\n${normal}"
  printf "\n${line_text}\n\n"

  ERROR=true
}
trap 'on_err ${LINENO}' ERR
#on_err 42

# Trap err signals and get backtrace
on_exit() {
  if [[ $ERROR == true ]]; then
    backtrace

    local red=$(tput setaf 1)
    local normal=$(tput sgr0)
    printf "${red}Finished unsuccessfully${normal}\n"
    exit 1
  else
    local green=$(tput setaf 2)
    local normal=$(tput sgr0)
    printf "${green}Finished successfully${normal}\n"
  fi
}
#exit 1
#mv /does/not/exist /tmp

# Define helper functions
output() {
  local title="$1"
  shift
  local color="$1"
  shift
  normal=$(tput sgr0)
  local body="$1"
  shift

  printf "${color}${title}:${normal} ${body}\n" "$@"
}
#output "title" "color" "body 1:%s 2:%s" "arg1" "arg2" "arg3"

info() {
  local body="$1"
  shift

  printf "$body" "$@"
  printf "\n"
}
#info 'Test info (%s)' "arg1"

log() {
  local body="$1"
  shift
  local pink=$(tput setaf 5)

  output "Log" "$pink" "$body" "$@"
}
#log 'log (%s, %s)' arg1 arg2

debug() {
  if $DEBUG; then
    local body="$1"
    shift
    local blue=$(tput setaf 4)

    output "Debug" "$blue" "$body" "$@"
  fi
}
#debug 'test (%s, %s)' arg1 arg2

warn() {
  local body="$1"
  shift
  local yellow=$(tput setaf 3)

  output "Warning" "$yellow" "$body" "$@"
}
#warn 'test (%s, %s)' arg1 arg2

error() {
  local body="$1"
  shift
  local red=$(tput setaf 1)

  output "Error" "$red" "$body" "$@"
}
#error 'Error (%s, %s)' arg1 arg2

success() {
  local body="$1"
  shift
  local green=$(tput setaf 2)

  output "Success" "$green" $body "$@"
}
#success 'Success (%s, %s)' arg1 arg2

stage() {
  local title=$1
  local first=$2
  local columns=40

  declare -i suffix # declare spare an integer
  local suffix=$columns-${#title}-5

  if [[ $first != true ]]; then
    printf "\n"
  fi

  printf "########################################\n"
  printf "# %*s%s%*s #\n" "$prefix" "$title" " " "$suffix"
  printf "########################################\n\n"
}
#stage "My new stage"

act() {
  local cmd=$1
  shift

  debug "${cmd} ${@}"

  if ! $DEBUG; then
    $cmd "$@"
  else
    warn "NOT RUNNING THE COMMAND!"
  fi
}

# Back up existing dotfiles if they exist
link() {
  local src=$1
  local basename=$(basename $src)
  local dest="${HOME}/.${basename}"

  # Skip backing up if the file is already symlinked to the right place.
  if [[ "$(readlink "$dest")" == "$src" ]]; then
    info "Skipping %s since it is already symlinked to %s" "$src" "$dest"
    return
  fi

  # Only back up if the file exists.
  is_file "$dest"  && ( \
    info 'Backing up %s as %s' "$dest" "$dest.bak"
    act mv "$dest" "$dest.bak" || true
  )

  info 'Symlinking %s to %s' "$src" "$dest"
  act ln -s "$src" "$dest"
}
#link ~/.dotfiles/link/gitignore

# Touch files that need to be present
# DO NOT RENAME TO TOUCH OR YOU WILL CONFLICT THE BINARY AND RECURSE
touch_file() {
  local src=$1
  local basename=$(basename $src)
  local dest="${HOME}/.${basename}"

  info 'Touching %s' "$dest"
  act touch "$dest"
}
#touch_file  ~/.dotfiles/link/gitignore

parse_folder() {
  action=$1
  dir=$2

  for file in "$dir"/*; do
    # TODO(achew22): Should this only parse files or are folders ok?
    if [[ -f "$file" ]]; then
      log "$action %s" $file
      $action $file ~/.$basename
    fi
  done
}
#parse_folder echo $HOME

# Execute a script as sudo if the script ends in .$OS. or it doesn't
# specify exclusion
conditionally_exec() {
  local src="$1"
  local short="$(basename "$src")"

  # Do not move this into a single check, you're depending on the else
  # fallthrough to execute non ostype matches
  if [[ $src == *".linux."* ]]; then
    if [[ $OSTYPE == "linux-gnu" ]]; then
      info "Running linux specific script: %s" $short
      act $src "$@" || \
        error "Failed to run %s" $short
    fi
  elif [[ $src == *".osx."* ]]; then
    if [[ $OSTYPE == "darwin"* ]]; then
      info "Running osx specific script: %s" $short
      act $src "$@" || \
        error "Failed to run %s" $short
    fi
  else
    info "Running script: %s" $short ||
    act $src "$@" \
        error "Failed to run %s" $short
  fi
}

main() {
  trap on_exit EXIT

  REPO="${HOME}/.dotfiles"
  
  # Clone the repository into the home directory
  if [ ! -d $REPO ]; then
    git init $REPO
  fi
  
  git -C "$REPO" config "remote.github.url" "https://github.com/achew22/dotfiles"
  git -C "$REPO" config "remote.github.fetch" "+refs/heads/*:refs/remotes/github/*"

  git -C "$REPO" fetch github master
  git -C "$REPO" reset --hard github/master

  # Install sudo if it isn't installed
  command -v sudo > /dev/null 2>&1 || {
    echo "Prompting to install sudo, if you say no your install will abort"
    apt-get install sudo || (echo "Install aborted because sudo is absent"; exit 1)
  }

  # Before running ANY command, prompt the user for a password.
  # Invalidate the user's sudo session before doing a command
  sudo -K # -K = Sure kill (the user's cookie)

  stage "Creating linked config files" true
  parse_folder link "${REPO}/link"
  
  stage "Touching local config files"
  parse_folder touch_file "${REPO}/touch"
  
  stage "Running installers"
  parse_folder conditionally_exec "${REPO}/installers"
}

# Run main if you were run as the file directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main
fi
# Also run main if there is no source file (curl'd into bash).
if [[ "${BASH_SOURCE[0]}" == "" ]]; then
  main
fi

